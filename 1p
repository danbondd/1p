#!/usr/bin/env bash

function error {
	echo "$1"
	exit 1
}

function signin {
	# Get current account from op config
	ACCOUNT=$(jq '.accounts | .[] | .shorthand' "$HOME"/.op/config) || error "error getting op config"
	# Sign in to account
	eval $(op signin "${ACCOUNT:1:-1}")
}

function getUsage {
	echo "
1p Subcommands:

    password    Get password for given account"
}

function createUsage {
	echo "
1p Subcommands:

    password    Create a random 32 bit password"
}


# Check requirements
command -v op &> /dev/null || error "required program 'op' is not installed"
command -v jq &> /dev/null || error "required program 'jq' is not installed"
command -v openssl &> /dev/null || error "required program 'openssl' is not installed"

# Check if no args
if [ "$#" -eq 0 ]; then
	op -h
	exit 0
fi

# Skip sign in if arbitrary command
for arg in "$@"
do
    if [[ "$arg" =~ ^(-h|--help)$ ]]; then
	    op "$@"
		if [[ "$1" == "get" ]]; then
			getUsage
		elif [[ "$1" == "create" ]]; then
			createUsage
		fi
	    exit 0
    elif [[ "$arg" =~ ^(encode|update|signin|signout)$ ]]; then
	    op "$@"
	    exit "$?"
    fi
done

# Check if custom 1p command
if [[ "$1" == "get" && "$2" == "password" ]]; then
	if [ -z "$3" ]; then
		error "account name not specified, try: 1p get password <account>"
	fi
	signin
	ITEM=$(op get item $3)
	[ $? -eq 0 ] || exit $?
	echo "$ITEM" | jq '.details.fields[] | select(.designation=="password").value' --raw-output
	exit 0
elif [[ "$1" == "create" && "$2" == "password" ]]; then
	PASSWORD=$(openssl rand -base64 32)
	[ $? -eq 0 ] || error "error generating password, try: 1p create password"
	echo "${PASSWORD}"
	exit 0
fi


# Run op command and pretty print json
signin
op "$@" | jq .
