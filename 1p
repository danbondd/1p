#!/usr/bin/env bash

function error {
	echo "$1"
	exit 1
}

function signin {
	# Get current account from op config
	if [ -f "$HOME/.op/config" ]; then
		ACCOUNT=$(jq '.accounts | .[] | .shorthand' "$HOME/.op/config" --raw-output) || error "error getting op config"
		echo $(op signin "${ACCOUNT}")
	else
		op "$@"
	fi
}

function getUsage {
	echo "
1p Subcommands:

    password    Get password for given account
"
}

function createUsage {
	echo "
1p Subcommands:

    password    Create a random 32 bit password
"
}


# Check requirements
command -v op &> /dev/null || error "required program 'op' is not installed"
command -v jq &> /dev/null || error "required program 'jq' is not installed"
command -v openssl &> /dev/null || error "required program 'openssl' is not installed"

# Check if no args
if [ "$#" -eq 0 ]; then
	op -h
	exit 0
fi

if [[ $* =~ "-h" || $* =~ "--help" ]]; then
	op "$@"
	if [[ $* =~ "get" ]]; then
		getUsage
	elif [[ $* =~ "create" ]]; then
		createUsage
	fi
	exit 0
fi

for arg in "$@"
do
    if [[ "$arg" =~ ^(--version|encode|update|signout)$ ]]; then
	    op "$@"
	    exit "$?"
	elif [[ "$arg" == "signin" ]]; then
		signin "$@"
	    exit "$?"
    fi
done

# Check if custom 1p command
if [[ "$1" == "get" && "$2" == "password" ]]; then
	if [ -z "$3" ]; then
		error "account name not specified, try: 1p get password <account>"
	fi
	ITEM=$(op get item $3)
	[ $? -eq 0 ] || exit $?
	echo "${ITEM}" | jq '.details.fields[] | select(.designation=="password").value' --raw-output
	exit 0
elif [[ "$1" == "create" && "$2" == "password" ]]; then
	PASSWORD=$(openssl rand -base64 32)
	[ $? -eq 0 ] || error "error generating password, try: 1p create password"
	echo "${PASSWORD}"
	exit 0
fi

OUTPUT=$(op "$@")
[ $? -eq 0 ] || exit $?

$(echo "${OUTPUT}" | jq -e . >/dev/null 2>&1)
[ $? -eq 0 ] || error "${OUTPUT}"

echo "${OUTPUT}"
exit 0
